// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dictionary.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWord = `-- name: AddWord :one
INSERT INTO words("en", "pl", "author")
VALUES ($1, $2, $3::text)
RETURNING id, en, pl, author, created_at, updated_at
`

type AddWordParams struct {
	En     string
	Pl     string
	Author string
}

func (q *Queries) AddWord(ctx context.Context, arg AddWordParams) (Word, error) {
	row := q.db.QueryRow(ctx, addWord, arg.En, arg.Pl, arg.Author)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.En,
		&i.Pl,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWord = `-- name: DeleteWord :exec
DELETE FROM words
WHERE words.id = $1
`

func (q *Queries) DeleteWord(ctx context.Context, wordID int32) error {
	_, err := q.db.Exec(ctx, deleteWord, wordID)
	return err
}

const getAllWords = `-- name: GetAllWords :many
SELECT words.id,
    words.pl,
    words.en,
    words.author,
    words.created_at,
    words.updated_at,
    COUNT(*) over () as total_rows
FROM words
WHERE words.en LIKE '%' || $1::text || '%'
    OR words.pl LIKE '%' || $1::text || '%'
ORDER BY CASE
        WHEN $2 = 'pl'
        AND $3::bool = true THEN pl
        WHEN $2 = 'en'
        AND $3::bool = true THEN en
    END DESC,
    CASE
        WHEN $2 = 'pl'
        AND $3::bool = false THEN pl
        WHEN $2 = 'en'
        AND $3::bool = false THEN en
    END
LIMIT $5 OFFSET $4
`

type GetAllWordsParams struct {
	Search         string
	SortColumn     interface{}
	SortDescending bool
	PageOffset     int32
	PageSize       int32
}

type GetAllWordsRow struct {
	ID        int32
	Pl        string
	En        string
	Author    string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	TotalRows int64
}

func (q *Queries) GetAllWords(ctx context.Context, arg GetAllWordsParams) ([]GetAllWordsRow, error) {
	rows, err := q.db.Query(ctx, getAllWords,
		arg.Search,
		arg.SortColumn,
		arg.SortDescending,
		arg.PageOffset,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWordsRow
	for rows.Next() {
		var i GetAllWordsRow
		if err := rows.Scan(
			&i.ID,
			&i.Pl,
			&i.En,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalRows,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWordsByAuthor = `-- name: GetAllWordsByAuthor :many
SELECT words.id,
    words.pl,
    words.en,
    words.author,
    words.created_at,
    words.updated_at,
    COUNT(*) over () as total_rows
FROM words
WHERE words.author = $1
    AND (
        words.en LIKE '%' || $2::text || '%'
        OR words.pl LIKE '%' || $2::text || '%'
    )
ORDER BY CASE
        WHEN $3 = 'pl'
        AND $4::bool = true THEN pl
        WHEN $3 = 'en'
        AND $4::bool = true THEN en
    END DESC,
    CASE
        WHEN $3 = 'pl'
        AND $4::bool = false THEN pl
        WHEN $3 = 'en'
        AND $4::bool = false THEN en
    END
LIMIT $6 OFFSET $5
`

type GetAllWordsByAuthorParams struct {
	Author         string
	Search         string
	SortColumn     interface{}
	SortDescending bool
	PageOffset     int32
	PageSize       int32
}

type GetAllWordsByAuthorRow struct {
	ID        int32
	Pl        string
	En        string
	Author    string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	TotalRows int64
}

func (q *Queries) GetAllWordsByAuthor(ctx context.Context, arg GetAllWordsByAuthorParams) ([]GetAllWordsByAuthorRow, error) {
	rows, err := q.db.Query(ctx, getAllWordsByAuthor,
		arg.Author,
		arg.Search,
		arg.SortColumn,
		arg.SortDescending,
		arg.PageOffset,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWordsByAuthorRow
	for rows.Next() {
		var i GetAllWordsByAuthorRow
		if err := rows.Scan(
			&i.ID,
			&i.Pl,
			&i.En,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalRows,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWordByEn = `-- name: GetWordByEn :one
SELECT id, en, pl, author, created_at, updated_at
FROM words
where words.en = $1
`

func (q *Queries) GetWordByEn(ctx context.Context, en string) (Word, error) {
	row := q.db.QueryRow(ctx, getWordByEn, en)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.En,
		&i.Pl,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWordById = `-- name: GetWordById :one
SELECT words.id,
    words.pl,
    words.en,
    words.author,
    words.created_at,
    words.updated_at
FROM words
where words.id = $1
`

type GetWordByIdRow struct {
	ID        int32
	Pl        string
	En        string
	Author    string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetWordById(ctx context.Context, wordID int32) (GetWordByIdRow, error) {
	row := q.db.QueryRow(ctx, getWordById, wordID)
	var i GetWordByIdRow
	err := row.Scan(
		&i.ID,
		&i.Pl,
		&i.En,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWordByPl = `-- name: GetWordByPl :one
SELECT id, en, pl, author, created_at, updated_at
FROM words
where words.pl = $1
`

func (q *Queries) GetWordByPl(ctx context.Context, pl string) (Word, error) {
	row := q.db.QueryRow(ctx, getWordByPl, pl)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.En,
		&i.Pl,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWord = `-- name: UpdateWord :exec
UPDATE words
SET "en" = $1,
    "pl" = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE words.id = $3
`

type UpdateWordParams struct {
	En     string
	Pl     string
	WordID int32
}

func (q *Queries) UpdateWord(ctx context.Context, arg UpdateWordParams) error {
	_, err := q.db.Exec(ctx, updateWord, arg.En, arg.Pl, arg.WordID)
	return err
}
