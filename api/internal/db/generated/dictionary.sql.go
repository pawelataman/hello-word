// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dictionary.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWord = `-- name: AddWord :exec
INSERT INTO words("en", "pl", "author")
VALUES ($1, $2, $3::text)
`

type AddWordParams struct {
	En     string
	Pl     string
	Author string
}

func (q *Queries) AddWord(ctx context.Context, arg AddWordParams) error {
	_, err := q.db.Exec(ctx, addWord, arg.En, arg.Pl, arg.Author)
	return err
}

const deleteWord = `-- name: DeleteWord :exec
DELETE
FROM words
WHERE words.id = $1
`

func (q *Queries) DeleteWord(ctx context.Context, wordID int32) error {
	_, err := q.db.Exec(ctx, deleteWord, wordID)
	return err
}

const getAllWords = `-- name: GetAllWords :many
SELECT words.id,
       words.pl,
       words.en,
       words.author,
       words.created_at,
       words.updated_at,
       COUNT(*) over () as total_rows
FROM words
WHERE words.en LIKE '%' || $1::text || '%'
   OR words.pl LIKE '%' || $1::text || '%'
ORDER BY CASE
             WHEN $2 = 'pl' AND $3::bool = true THEN pl
             WHEN $2 = 'en' AND $3::bool = true THEN en
             END DESC,
         CASE
             WHEN $2 = 'pl' AND $3::bool = false THEN pl
             WHEN $2 = 'en' AND $3::bool = false THEN en
             END
LIMIT $5 OFFSET $4
`

type GetAllWordsParams struct {
	Search         string
	SortColumn     interface{}
	SortDescending bool
	PageOffset     int32
	PageSize       int32
}

type GetAllWordsRow struct {
	ID        int32
	Pl        string
	En        string
	Author    string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	TotalRows int64
}

func (q *Queries) GetAllWords(ctx context.Context, arg GetAllWordsParams) ([]GetAllWordsRow, error) {
	rows, err := q.db.Query(ctx, getAllWords,
		arg.Search,
		arg.SortColumn,
		arg.SortDescending,
		arg.PageOffset,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWordsRow
	for rows.Next() {
		var i GetAllWordsRow
		if err := rows.Scan(
			&i.ID,
			&i.Pl,
			&i.En,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalRows,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWordById = `-- name: GetWordById :one
SELECT words.id, words.pl, words.en, words.author, words.created_at, words.updated_at
FROM words
where words.id = $1
`

type GetWordByIdRow struct {
	ID        int32
	Pl        string
	En        string
	Author    string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetWordById(ctx context.Context, wordID int32) (GetWordByIdRow, error) {
	row := q.db.QueryRow(ctx, getWordById, wordID)
	var i GetWordByIdRow
	err := row.Scan(
		&i.ID,
		&i.Pl,
		&i.En,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
