// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: flashcard.sql

package db

import (
	"context"
)

const createFlashcard = `-- name: CreateFlashcard :one
INSERT INTO flashcards("name", "author")
VALUES ($1, $2)
RETURNING id, name, author, created_at, updated_at
`

type CreateFlashcardParams struct {
	Name   string
	Author string
}

func (q *Queries) CreateFlashcard(ctx context.Context, arg CreateFlashcardParams) (Flashcard, error) {
	row := q.db.QueryRow(ctx, createFlashcard, arg.Name, arg.Author)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFlashcardById = `-- name: DeleteFlashcardById :exec
DELETE
FROM flashcards
WHERE flashcards.id = $1::integer
`

func (q *Queries) DeleteFlashcardById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFlashcardById, id)
	return err
}

const getFlashcardById = `-- name: GetFlashcardById :one
SELECT id, name, author, created_at, updated_at
FROM flashcards
WHERE flashcards.id = $1::integer
`

func (q *Queries) GetFlashcardById(ctx context.Context, id int32) (Flashcard, error) {
	row := q.db.QueryRow(ctx, getFlashcardById, id)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFlashcardByName = `-- name: GetFlashcardByName :one
SELECT id, name, author, created_at, updated_at
FROM flashcards
WHERE flashcards.name = $1
`

func (q *Queries) GetFlashcardByName(ctx context.Context, name string) (Flashcard, error) {
	row := q.db.QueryRow(ctx, getFlashcardByName, name)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFlashcards = `-- name: GetFlashcards :many
SELECT id, name, author, created_at, updated_at
FROM flashcards
`

func (q *Queries) GetFlashcards(ctx context.Context) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getFlashcards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlashcardsByAuthor = `-- name: GetFlashcardsByAuthor :many
SELECT id, name, author, created_at, updated_at
FROM flashcards
where flashcards.author = $1
`

func (q *Queries) GetFlashcardsByAuthor(ctx context.Context, author string) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getFlashcardsByAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFlashcardName = `-- name: UpdateFlashcardName :one
UPDATE flashcards
SET "name" = $1
WHERE flashcards.id = $2
RETURNING id, name, author, created_at, updated_at
`

type UpdateFlashcardNameParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateFlashcardName(ctx context.Context, arg UpdateFlashcardNameParams) (Flashcard, error) {
	row := q.db.QueryRow(ctx, updateFlashcardName, arg.Name, arg.ID)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
