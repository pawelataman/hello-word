// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dictionary.sql

package db

import (
	"context"
)

const getAllWords = `-- name: GetAllWords :many
SELECT words.id,
       words.pl,
       words.en,
       words.user_defined::bool as user_defined,
       words_categories.id, words_categories."categoryName",
       COUNT(*) over ()         as total_rows
FROM words
         JOIN words_categories ON words."categoryId" = words_categories.id
WHERE words.en LIKE '%' || $1::text || '%'
   OR words.pl LIKE '%' || $1::text || '%'
ORDER BY CASE
             WHEN $2 = 'pl' AND $3::bool = true THEN pl
             WHEN $2 = 'en' AND $3::bool = true THEN en
             END DESC,
         CASE
             WHEN $2 = 'pl' AND $3::bool = false THEN pl
             WHEN $2 = 'en' AND $3::bool = false THEN en
             END
LIMIT $5 OFFSET $4
`

type GetAllWordsParams struct {
	Search         string
	SortColumn     interface{}
	SortDescending bool
	PageOffset     int32
	PageSize       int32
}

type GetAllWordsRow struct {
	ID            int32
	Pl            string
	En            string
	UserDefined   bool
	WordsCategory WordsCategory
	TotalRows     int64
}

func (q *Queries) GetAllWords(ctx context.Context, arg GetAllWordsParams) ([]GetAllWordsRow, error) {
	rows, err := q.db.Query(ctx, getAllWords,
		arg.Search,
		arg.SortColumn,
		arg.SortDescending,
		arg.PageOffset,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWordsRow
	for rows.Next() {
		var i GetAllWordsRow
		if err := rows.Scan(
			&i.ID,
			&i.Pl,
			&i.En,
			&i.UserDefined,
			&i.WordsCategory.ID,
			&i.WordsCategory.CategoryName,
			&i.TotalRows,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
